import org.apache.tools.ant.filters.ReplaceTokens

def readVariables() {
    Properties props = new Properties()
    new File("${rootDir}/gradle/variables.properties").withInputStream {
        stream -> props.load(stream)
    }
    props.each {
        def name = it.key.replaceAll(/\./, '_').toUpperCase()
        if (!ext.has("${name}")) {
            ext."${name}" = it.value
        }
    }
}
readVariables()

task version {
    doLast {
        println PLUGIN_VERSION
    }
}

def generatedSrcPath = "src/generated/groovy"
def generatedSrcDir = project.file(generatedSrcPath)

task generateBuildConfig {
    def src = project.file("${rootDir}/gradle/variables.properties")
    def dest = project.file("${generatedSrcDir}/com/github/ksoichiro/web/resource/extension/BuildConfig.groovy")
    inputs.file src
    outputs.file dest
    doLast {
        dest.parentFile.absoluteFile.mkdirs()
        dest.text = """\
            |package com.github.ksoichiro.web.resource.extension
            |
            |// DO NOT EDIT
            |// This file is automatically generated.
            |class BuildConfig {
            |    public static final String PLUGIN_VERSION = "${PLUGIN_VERSION}"
            |}
            |""".stripMargin().stripIndent()
    }
}

task updateReadme(type: Copy) {
    from project.file("README.template.md")
    into project.projectDir
    rename { "README.md" }
    def latestReleaseVersion = PLUGIN_VERSION.replaceAll('-SNAPSHOT', '')
    filter(ReplaceTokens, tokens: [PLUGIN_VERSION: latestReleaseVersion])
}

sourceSets {
    main {
        groovy {
            srcDir generatedSrcPath
        }
    }
}

compileGroovy.dependsOn 'generateBuildConfig'

idea {
    module {
        sourceDirs += generatedSrcDir
    }
}
